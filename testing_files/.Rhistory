test <- observedmoments(test)
HB.tsm(test, 4, 100, 0)
library(betafunctions)
test = rBetaBinom(n = 50, N = 100, l = 0.25, u = 0.95, alpha = 5, beta = 3)
test <- observedmoments(test)
HB.tsm(test, 4, 100, 0)
library(betafunctions)
test = rBetaBinom(n = 50, N = 100, l = 0.25, u = 0.95, alpha = 5, beta = 3)
test <- observedmoments(test)
HB.tsm(test, 4, 100, 0)
library(betafunctions)
test = rBetaBinom(n = 50, N = 100, l = 0.25, u = 0.95, alpha = 5, beta = 3)
test <- observedmoments(test)
HB.tsm(test, 4, 100, 0)
test <- observedmoments(test)
m <- test$raw[1]
m
m[1]
m <- test$raw[[1]]
m
library(betafunctions)
test = rBetaBinom(n = 50, N = 100, l = 0.25, u = 0.95, alpha = 5, beta = 3)
test <- observedmoments(test)
m <- test$raw[[1]]
m
HB.tsm(test, 4, 100, 0)
library(betafunctions)
test = rBetaBinom(n = 50, N = 100, l = 0.25, u = 0.95, alpha = 5, beta = 3)
test2 <- observedmoments(test)
m <- test2$raw[[1]]
m
HB.tsm(test, 4, 100, 0)
factorial_from_ordinary_moments(test2$raw[[1]], test2$central[[2]], test2$standardized[[3]], test2$standardized[[4]])
hist(test)
factorial_from_ordinary_moments <- function(mean, variance, skewness, kurtosis) {
# Compute higher order central moments
sigma_4 <- kurtosis * variance^2
sigma_3 <- skewness * variance^(3/2)
# Compute ordinary moments
m2 <- variance + mean^2
m3 <- sigma_3 + 3 * mean * variance + mean^3
m4 <- sigma_4 + 4 * mean * sigma_3 + 6 * mean^2 * variance + mean^4
# Stirling numbers of the second kind
stirling_numbers <- list(c(1), c(1, 1), c(1, 3, 1), c(1, 7, 6, 1))
# Compute factorial moments
f2 <- stirling_numbers[[2]][1] * mean + stirling_numbers[[2]][2] * m2
f3 <- stirling_numbers[[3]][1] * mean + stirling_numbers[[3]][2] * m2 + stirling_numbers[[3]][3] * m3
f4 <- stirling_numbers[[4]][1] * mean + stirling_numbers[[4]][2] * m2 + stirling_numbers[[4]][3] * m3 + stirling_numbers[[4]][4] * m4
# Compute factorial variance, skewness, and kurtosis
sigma_2_f <- (f2 - mean^2)
gamma_3_f <- (f3 - 3 * mean * f2 + 2 * mean^3) / sqrt(sigma_2_f)^3
gamma_4_f <- f4 - 4 * mean * f3 + 6 * mean^2 * f2 - 3 * mean^4 / sqrt(sigma_2_f)^4
return(c(mean = mean, sigma_2_f = sigma_2_f, gamma_3_f = gamma_3_f, gamma_4_f = gamma_4_f))
}
library(betafunctions)
test = rBetaBinom(n = 50, N = 100, l = 0.25, u = 0.95, alpha = 5, beta = 3)
test2 <- observedmoments(test)
m <- test2$raw[[1]]
m
HB.tsm(test, 4, 100, 0)
factorial_from_ordinary_moments(test2$raw[[1]], test2$central[[2]], test2$standardized[[3]], test2$standardized[[4]])
library(betafunctions)
test = rBetaBinom(n = 50, N = 100, l = 0.25, u = 0.95, alpha = 5, beta = 3)
test2 <- observedmoments(test)
m <- test2$raw[[1]]
m
est <- HB.tsm(test, 4, 100, 0)
evar <- est[2] - est[1]^2
est[4] <- est[4] - 4*est[1]*est[3] + 6*est[1]^2*est[2] - 3*est[1]^4 / sqrt(var)^4
library(betafunctions)
test = rBetaBinom(n = 50, N = 100, l = 0.25, u = 0.95, alpha = 5, beta = 3)
test2 <- observedmoments(test)
m <- test2$raw[[1]]
m
est <- HB.tsm(test, 4, 100, 0)
evar <- est[2] - est[1]^2
est[4] <- est[4] - 4*est[1]*est[3] + 6*est[1]^2*est[2] - 3*est[1]^4 / sqrt(evar)^4
est[3] <- est[3] - 3*est[1]*est[2] + 2*est[1]^3 / sqrt(evar)^3
est[2] <- est[2] - est[1]^2
est
factorial_from_ordinary_moments(test2$raw[[1]], test2$central[[2]], test2$standardized[[3]], test2$standardized[[4]])
library(betafunctions)
test = rBetaBinom(n = 50, N = 100, l = 0.25, u = 0.95, alpha = 5, beta = 3)
test2 <- observedmoments(test)
m <- test2$raw[[1]]
m
est <- HB.tsm(test, 4, 100, 0)
evar <- est[2] - est[1]^2
est[4] <- (est[4] - 4*est[1]*est[3] + 6*est[1]^2*est[2] - 3*est[1]^4) / sqrt(evar)^4
est[3] <- (est[3] - 3*est[1]*est[2] + 2*est[1]^3) / sqrt(evar)^3
est[2] <- est[2] - est[1]^2
est
factorial_from_ordinary_moments(test2$raw[[1]], test2$central[[2]], test2$standardized[[3]], test2$standardized[[4]])
library(betafunctions)
test = rBetaBinom(n = 50, N = 100, l = 0.25, u = 0.95, alpha = 5, beta = 3)
test2 <- observedmoments(test)
m <- test2$raw[[1]]
m
est <- HB.tsm(test, 4, 100, 0)
evar <- est[2] - est[1]^2
est[4] <- (est[4] - 4*est[1]*est[3] + 6*est[1]^2*est[2] - 3*est[1]^4) / sqrt(evar)^4
est[3] <- (est[3] - 3*est[1]*est[2] + 2*est[1]^3) / sqrt(evar)^3
est[2] <- est[2] - est[1]^2
est
factorial_from_ordinary_moments(test2$raw[[1]], test2$central[[2]], test2$standardized[[3]], test2$standardized[[4]])
factorial_from_ordinary_moments <- function(mean, variance, skewness, kurtosis) {
# Compute higher order central moments
sigma_4 <- kurtosis * variance^2
sigma_3 <- skewness * variance^(3/2)
# Compute ordinary moments
m2 <- variance + mean^2
m3 <- sigma_3 + 3 * mean * variance + mean^3
m4 <- sigma_4 + 4 * mean * sigma_3 + 6 * mean^2 * variance + mean^4
# Stirling numbers of the second kind
stirling_numbers <- list(c(1), c(1, 1), c(1, 3, 1), c(1, 7, 6, 1))
# Compute factorial moments
f2 <- stirling_numbers[[2]][1] * mean + stirling_numbers[[2]][2] * m2
f3 <- stirling_numbers[[3]][1] * mean + stirling_numbers[[3]][2] * m2 + stirling_numbers[[3]][3] * m3
f4 <- stirling_numbers[[4]][1] * mean + stirling_numbers[[4]][2] * m2 + stirling_numbers[[4]][3] * m3 + stirling_numbers[[4]][4] * m4
# Compute factorial variance, skewness, and kurtosis
sigma_2_f <- (f2 - mean^2)
gamma_3_f <- (f3 - 3 * mean * f2 + 2 * mean^3) / sqrt(sigma_2_f)^3
gamma_4_f <- (f4 - 4 * mean * f3 + 6 * mean^2 * f2 - 3 * mean^4) / sqrt(sigma_2_f)^4
return(c(mean = mean, sigma_2_f = sigma_2_f, gamma_3_f = gamma_3_f, gamma_4_f = gamma_4_f))
}
library(betafunctions)
test = rBetaBinom(n = 50, N = 100, l = 0.25, u = 0.95, alpha = 5, beta = 3)
test2 <- observedmoments(test)
m <- test2$raw[[1]]
m
est <- HB.tsm(test, 4, 100, 0)
evar <- est[2] - est[1]^2
est[4] <- (est[4] - 4*est[1]*est[3] + 6*est[1]^2*est[2] - 3*est[1]^4) / sqrt(evar)^4
est[3] <- (est[3] - 3*est[1]*est[2] + 2*est[1]^3) / sqrt(evar)^3
est[2] <- est[2] - est[1]^2
est
factorial_from_ordinary_moments(test2$raw[[1]], test2$central[[2]], test2$standardized[[3]], test2$standardized[[4]])
sqrt(test2$central[[2]])/100)^2
(sqrt(test2$central[[2]])/100)^2
library(betafunctions)
test = rBetaBinom(n = 50, N = 100, l = 0.25, u = 0.95, alpha = 5, beta = 3)
test = test/100
test2 <- observedmoments(test)
m <- test2$raw[[1]]
m
est <- HB.tsm(test, 4, 100, 0)
evar <- est[2] - est[1]^2
est[4] <- (est[4] - 4*est[1]*est[3] + 6*est[1]^2*est[2] - 3*est[1]^4) / sqrt(evar)^4
est[3] <- (est[3] - 3*est[1]*est[2] + 2*est[1]^3) / sqrt(evar)^3
est[2] <- est[2] - est[1]^2
est
factorial_from_ordinary_moments(test2$raw[[1]], test2$central[[2]], test2$standardized[[3]], test2$standardized[[4]])
(sqrt(test2$central[[2]])/100)^2
library(betafunctions)
test = rBetaBinom(n = 50, N = 100, l = 0.25, u = 0.95, alpha = 5, beta = 3)
test = test/100
test2 <- observedmoments(test)
m <- test2$raw[[1]]
m
est <- HB.tsm(test, 4, 100, 0)
evar <- est[2] - est[1]^2
est[4] <- (est[4] - 4*est[1]*est[3] + 6*est[1]^2*est[2] - 3*est[1]^4) / sqrt(evar)^4
est[3] <- (est[3] - 3*est[1]*est[2] + 2*est[1]^3) / sqrt(evar)^3
est[2] <- est[2] - est[1]^2
est
factorial_from_ordinary_moments(test2$raw[[1]], test2$central[[2]], test2$standardized[[3]], test2$standardized[[4]])
library(betafunctions)
test = rBetaBinom(n = 50, N = 100, l = 0.25, u = 0.95, alpha = 5, beta = 3)
test = test/100
test2 <- observedmoments(test)
m <- test2$raw[[1]]
m
est <- HB.tsm(test, 4, 100, 0)
evar <- est[2] - est[1]^2
est[4] <- (est[4] - 4*est[1]*est[3] + 6*est[1]^2*est[2] - 3*est[1]^4) / sqrt(evar)^4
est[3] <- (est[3] - 3*est[1]*est[2] + 2*est[1]^3) / sqrt(evar)^3
est[2] <- est[2] - est[1]^2
est
c(test2$raw[[1]], test2$central[[2]], test2$standardized[[3]], test2$standardized[[4]])
factorial_from_ordinary_moments(test2$raw[[1]], test2$central[[2]], test2$standardized[[3]], test2$standardized[[4]])
k1 = 60 + 70 + 20 + 22 + 7 + 5
k2 = 60 + 60 + 27 + 25 + 12 + 9 + 10 + 44 + 5 + 5 + 25 + 42 + 24 + 4 + 7 + 20 + 23 + 9 + 33 + 15 + 36
k3 = 1155/2 + 37 + 10 + 15*7 + 37 + 12 + 12 + 7 + 20 + 7 + 10 + 22
k4 = 33/2 + 20 + 15 + 40 + 17*10 + 22 + 5
k5 = 30 + 12 + 30 + 10 + 27 + 15 + 30 + 26 + 60 + 663/2 + 20 + 35/2 + 35/2 + 12 + 16 + 13 + 153/2 + 27 + 37*4 + 23 + 35
k6 = 179/2 + 15*8 + 24 + 36 + 13 + 20 + 5 + 20 + 15 + 15 + 85 + 22 + 5 + 18 + 75 + 35 + 17 + 10 + 14 + 40 + 142/2
k7 = 30 + 157/2 + 31 + 10 + 22 + 25 + 25 + 25 + 25 + 15 + 60 + 70 + 60 +30+ 26 + 20 + 60 + 22 + 18 + 5 + 48 + 80 + 14 + 8
k8 = 8 + 25 + 60 + 22 + 15 + 13 + 107/2 + 25 + 30 + 10 + 10 + 12 + 24 + 10 + 26 + 20 + 25 + 107/2 + 30 + 160 + 15 + 18 + 75 + 4 + 18 + 40 + 11 + 604/2
k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8
library(betafunctions)
??betafunctions
library(betafunctions)
?R.ETL
R.ETL(28.632, 33.100979919678714, 0, 50, 50)
library(betafunctions)
?rBetacBinom
hbdata <- rBetacBinom(1000, 100, 1, .15, .85, 6, 4)
hist(hbdata)
hist(hbdata, xlim = c(0, 100))
hbdata <- rBetacBinom(1000, 100, 1, .15, .85, 7, 4)
hist(hbdata, xlim = c(0, 100))
library(betafunctions)
hbdata <- rBetacBinom(1000, 100, 1, .15, .85, 7, 4)
hist(hbdata, xlim = c(0, 100))
library(betafunctions)
hbdata <- rBetacBinom(1000, 100, 1, .15, .85, 7, 4)
hist(hbdata, xlim = c(0, 100))
library(betafunctions)
hbdata <- rBetacBinom(1000, 100, 1, .15, .85, 7, 4)
hist(hbdata, xlim = c(0, 100))
library(betafunctions)
hbdata <- rBetacBinom(1000, 100, 1, .15, .85, 7, 4)
hist(hbdata, xlim = c(0, 100))
library(betafunctions)
hbdata <- rBetacBinom(1000, 100, 1, .15, .85, 8, 4)
hist(hbdata, xlim = c(0, 100))
library(betafunctions)
hbdata <- matrix(rBetacBinom(1000, 100, 1, .15, .85, 8, 4), ncol = 1)
hbdata
?write.csv
F == FALSE
F == 0
F == FALSE == 0
getwd()
setwd("C:/Users/hehaa/OneDrive/git")
getwd()
ls()
dir()
setwd("C:/Users/hehaa/OneDrive/git/BBClassify_Python")
dir()
setwd("C:/Users/hehaa/OneDrive/git/BBClassify_Python/testing_files")
dir()
write.table(hbdata, "test", row.names = FALSE, col.names = FALSE)
dir()
table hbdata
table(hbdata)
t(table(hbdata))
test <- table(hbdata)
colnames(test)
test[1]
type(test[1])
class(test[1])
?table
as.data.frame(table)
as.data.frame(test)
matrix(as.data.frame(test))
as.matrix(as.data.frame(test))
hbdata_f <- as.matrix(as.data.frame(table(hbdata)))
hbdata_f
hbdata_f <- rbind(hbdata_f, c("0", "0"))
library(betafunctions)
hbdata <- matrix(rBetacBinom(1000, 100, 1, .15, .85, 8, 4), ncol = 1)
hbdata_f <- as.matrix(as.data.frame(table(hbdata)))
hbdata_f <- rbind(hbdata_f, c("0", "0"))
hbdata_f <- rbind(hbdata_f, c("100", "0"))
write.table(hbdata, "test", row.names = FALSE, col.names = FALSE)
hbdata_f
library(betafunctions)
hbdata <- matrix(rBetacBinom(1000, 100, 1, .15, .85, 8, 4), ncol = 1)
hbdata_f <- as.matrix(as.data.frame(table(hbdata)))
hbdata_f <- rbind(hbdata_f, c("0", "0"))
hbdata_f <- rbind(hbdata_f, c("100", "0"))
write.table(hbdata, "hbdata_raw", row.names = FALSE, col.names = FALSE)
write.table(hbdata_f, "hbdata_freq", row.names = FALSE, col.names = FALSE)
as.numeric(hbdata_f)
library(betafunctions)
hbdata <- matrix(rBetacBinom(1000, 100, 1, .15, .85, 8, 4), ncol = 1)
hbdata_f <- as.matrix(as.data.frame(table(hbdata)))
hbdata_f <- rbind(hbdata_f, c("0", "0"))
hbdata_f <- rbind(hbdata_f, c("100", "0"))
write.table(hbdata, "hbdata_raw", row.names = FALSE, col.names = FALSE)
write.table(as.numeric(hbdata_f), "hbdata_freq", row.names = FALSE, col.names = FALSE)
hbdata_f
as.numeric(hbdata_f)
?as.matrix
as.data.frame(hbdata_f)
as.data.frame(hbdata_f)[1, 1]
int(as.data.frame(hbdata_f)[1, 1])
integer(as.data.frame(hbdata_f)[1, 1])
as.integer(as.data.frame(hbdata_f)[1, 1])
?write.tcsv
?write.csv
library(betafunctions)
hbdata <- matrix(rBetacBinom(1000, 100, 1, .15, .85, 8, 4), ncol = 1)
hbdata_f <- as.matrix(as.data.frame(table(hbdata)))
hbdata_f <- rbind(hbdata_f, c("0", "0"))
hbdata_f <- rbind(hbdata_f, c("100", "0"))
hbdata_f
write.table(hbdata, "hbdata_raw", row.names = FALSE, col.names = FALSE)
write.csv(as.numeric(hbdata_f), "hbdata_freq", row.names = FALSE, col.names = FALSE, dec = " ")
library(betafunctions)
hbdata <- matrix(rBetacBinom(1000, 100, 1, .15, .85, 8, 4), ncol = 1)
hbdata_f <- as.matrix(as.data.frame(table(hbdata)))
hbdata_f <- rbind(hbdata_f, c("0", "0"))
hbdata_f <- rbind(hbdata_f, c("100", "0"))
hbdata_f
write.table(hbdata, "hbdata_raw", row.names = FALSE, col.names = FALSE)
write.table(as.numeric(hbdata_f), "hbdata_freq", col.names = FALSE)
library(betafunctions)
hbdata <- matrix(rBetacBinom(1000, 100, 1, .15, .85, 8, 4), ncol = 1)
hbdata_f <- as.matrix(as.data.frame(table(hbdata)))
hbdata_f <- rbind(hbdata_f, c("0", "0"))
hbdata_f <- rbind(hbdata_f, c("100", "0"))
hbdata_f1 <- matrix(nrow = nrow(hbdata_f), ncol = ncol(hbdata_f))
hbdata_f1[, 1] <- as.numeric(hbdata_f[, 1])
hbdata_f2[, 2] <- as.numeric(hbdata_f[, 2])
library(betafunctions)
hbdata <- matrix(rBetacBinom(1000, 100, 1, .15, .85, 8, 4), ncol = 1)
hbdata_f <- as.matrix(as.data.frame(table(hbdata)))
hbdata_f <- rbind(hbdata_f, c("0", "0"))
hbdata_f <- rbind(hbdata_f, c("100", "0"))
hbdata_f1 <- matrix(nrow = nrow(hbdata_f), ncol = ncol(hbdata_f))
hbdata_f1[, 1] <- as.numeric(hbdata_f[, 1])
hbdata_f1[, 2] <- as.numeric(hbdata_f[, 2])
write.table(hbdata, "hbdata_raw", row.names = FALSE, col.names = FALSE)
write.table(as.numeric(hbdata_f), "hbdata_freq", row.names = FALSE, col.names = FALSE, dec = " ")
library(betafunctions)
hbdata <- matrix(rBetacBinom(1000, 100, 1, .15, .85, 8, 4), ncol = 1)
hbdata_f <- as.matrix(as.data.frame(table(hbdata)))
hbdata_f <- rbind(hbdata_f, c("0", "0"))
hbdata_f <- rbind(hbdata_f, c("100", "0"))
hbdata_f1 <- matrix(nrow = nrow(hbdata_f), ncol = ncol(hbdata_f))
hbdata_f1[, 1] <- as.numeric(hbdata_f[, 1])
hbdata_f1[, 2] <- as.numeric(hbdata_f[, 2])
write.table(hbdata, "hbdata_raw", row.names = FALSE, col.names = FALSE)
write.table(as.numeric(hbdata_f1), "hbdata_freq", row.names = FALSE, col.names = FALSE, dec = " ")
hbdata_f1
library(betafunctions)
hbdata <- matrix(rBetacBinom(1000, 100, 1, .15, .85, 8, 4), ncol = 1)
hbdata_f <- as.matrix(as.data.frame(table(hbdata)))
hbdata_f <- rbind(hbdata_f, c("0", "0"))
hbdata_f <- rbind(hbdata_f, c("100", "0"))
hbdata_f1 <- matrix(nrow = nrow(hbdata_f), ncol = ncol(hbdata_f))
hbdata_f1[, 1] <- as.numeric(hbdata_f[, 1])
hbdata_f1[, 2] <- as.numeric(hbdata_f[, 2])
write.table(hbdata, "hbdata_raw", row.names = FALSE, col.names = FALSE)
write.table(as.numeric(hbdata_f1), "hbdata_freq", row.names = FALSE, col.names = FALSE)
library(betafunctions)
hbdata <- matrix(rBetacBinom(1000, 100, 1, .15, .85, 8, 4), ncol = 1)
hbdata_f <- as.matrix(as.data.frame(table(hbdata)))
hbdata_f <- rbind(hbdata_f, c("0", "0"))
hbdata_f <- rbind(hbdata_f, c("100", "0"))
hbdata_f1 <- matrix(nrow = nrow(hbdata_f), ncol = ncol(hbdata_f))
hbdata_f1[, 1] <- as.numeric(hbdata_f[, 1])
hbdata_f1[, 2] <- as.numeric(hbdata_f[, 2])
write.table(hbdata, "hbdata_raw", row.names = FALSE, col.names = FALSE)
write.csv(as.numeric(hbdata_f1), "hbdata_freq", row.names = FALSE, col.names = FALSE)
library(betafunctions)
hbdata <- matrix(rBetacBinom(1000, 100, 1, .15, .85, 8, 4), ncol = 1)
hbdata_f <- as.matrix(as.data.frame(table(hbdata)))
hbdata_f <- rbind(hbdata_f, c("0", "0"))
hbdata_f <- rbind(hbdata_f, c("100", "0"))
hbdata_f1 <- matrix(nrow = nrow(hbdata_f), ncol = ncol(hbdata_f))
hbdata_f1[, 1] <- as.numeric(hbdata_f[, 1])
hbdata_f1[, 2] <- as.numeric(hbdata_f[, 2])
write.table(hbdata, "hbdata_raw", row.names = FALSE, col.names = FALSE)
write.table(hbdata_f1, "hbdata_freq", row.names = FALSE, col.names = FALSE)
observedmoments(hbdata)
hbdata
observedmoments(hbdata[, 1])
write.table(t(hbdata), "hbdata_raw_hori", row.names = FALSE, col.names = FALSE)
?sample
hbdata
test <- hbdata[, 1]
test
rep(1, 61)
c(rep(1, 61), rep(0, 100-61))
test <- c(rep(1, 61), rep(0, 100-61))
test< - sample(test, 100)
test <- sample(test, 100)
test
hmdata_raw = matrix(ncol = 1000, nrow = 100)
for (i in hbdata):
i
mdo
hmdata_raw =" matrix(ncol = 1000, nrow = 100)
for (i in c(3, 2, 1))  {
i
}
mdo
hmdata_raw =" matrix(ncol = 1000, nrow = 100)
for (i in c(3, 2, 1))  {
i
}
mdo
i
for (i in 1:1000) {
i
}
for (i in 1:1000) {
i
}
for (i in hbdata[, 1]) {
print(i)
}
hbdata_raw[i, ] = sample(line, 100)
hbdata[, 1]
hbdata[1, 1]
p1 = c(rep(1, hbdata[i, 1]), rep(0, 100 - hbdata[i, 1]))
p1
p1 = sample(p1, len(p1))
p1 = sample(p1, length(p1))
p1
for (i in 1:1000) {
p1 = c(rep(1, hbdata[i, 1]), rep(0, 100 - hbdata[i, 1]))
p1 = sample(p1, length(p1))
hbdata_raw[i, ] = p1
}
hbdata_raw = matrix(ncol = 1000, nrow = 100)
for (i in 1:1000) {
p1 = c(rep(1, hbdata[i, 1]), rep(0, 100 - hbdata[i, 1]))
p1 = sample(p1, length(p1))
hbdata_raw[i, ] = p1
}
hbdata_raw = matrix(ncol = 1000, nrow = 100)
hbdata[1, 1]
hbdata_raw = matrix(nrow = 1000, ncol = 100)
hbdata[1, 1]
for (i in 1:1000) {
p1 = c(rep(1, hbdata[i, 1]), rep(0, 100 - hbdata[i, 1]))
p1 = sample(p1, length(p1))
hbdata_raw[i, ] = p1
}
hbdata_raw
cba(hbdata_raw)
while (round(reliability, 5) != .78601) {
for (i in 1:1000) {
p1 = c(rep(1, hbdata[i, 1]), rep(0, 100 - hbdata[i, 1]))
p1 = sample(p1, length(p1))
hbdata_raw[i, ] = p1
}
reliability = cba(hb_rawdata)
counter = counter + 1
print(counter)
}
while (round(reliability, 5) != .78601) {
for (i in 1:1000) {
p1 = c(rep(1, hbdata[i, 1]), rep(0, 100 - hbdata[i, 1]))
p1 = sample(p1, length(p1))
hbdata_raw[i, ] = p1
}
reliability = cba(hbdata_raw)
counter = counter + 1
print(counter)
}
hbdata_raw = matrix(nrow = 1000, ncol = 100)
hbdata[1, 1]
reliability = 0
counter = 0
while (round(reliability, 5) != .78601) {
for (i in 1:1000) {
p1 = c(rep(1, hbdata[i, 1]), rep(0, 100 - hbdata[i, 1]))
p1 = sample(p1, length(p1))
hbdata_raw[i, ] = p1
}
reliability = cba(hbdata_raw)
counter = counter + 1
print(counter)
}
?cat
while (round(reliability, 5) != .78601) {
for (i in 1:1000) {
p1 = c(rep(1, hbdata[i, 1]), rep(0, 100 - hbdata[i, 1]))
p1 = sample(p1, length(p1))
hbdata_raw[i, ] = p1
}
reliability = cba(hbdata_raw)
counter = counter + 1
cat(paste0("Reliability:", round(reliability, 5)))
}
while (round(reliability, 5) != .78601) {
for (i in 1:1000) {
p1 = c(rep(1, hbdata[i, 1]), rep(0, 100 - hbdata[i, 1]))
p1 = sample(p1, length(p1))
hbdata_raw[i, ] = p1
}
reliability = cba(hbdata_raw)
counter = counter + 1
cat("Reliability: ", reliability, ". Attempt: ", counter, "\r")
}
observedmoments(hbdata[, 1])
while (round(reliability, 5) != .78601) {
for (i in 1:1000) {
p1 = c(rep(1, hbdata[i, 1]), rep(0, 100 - hbdata[i, 1]))
p1 = sample(p1, length(p1))
hbdata_raw[i, ] = p1
}
reliability = cba(hbdata_raw)
counter = counter + 1
cat("Reliability: ", reliability, ". Attempt: ", counter, "\r")
}
while (round(reliability, 2) == .78) {
for (i in 1:1000) {
p1 = c(rep(1, hbdata[i, 1]), rep(0, 100 - hbdata[i, 1]))
p1 = sample(p1, length(p1))
hbdata_raw[i, ] = p1
}
reliability = cba(hbdata_raw)
counter = counter + 1
cat("Reliability: ", round(reliability, 2), ". Attempt: ", counter, "\r")
}
while (round(reliability, 2) != .79) {
for (i in 1:1000) {
p1 = c(rep(1, hbdata[i, 1]), rep(0, 100 - hbdata[i, 1]))
p1 = sample(p1, length(p1))
hbdata_raw[i, ] = p1
}
reliability = cba(hbdata_raw)
counter = counter + 1
cat("Reliability: ", round(reliability, 3), ". Attempt: ", counter, "\r")
}
write.table(hbdata_raw, "hbdata_complete", row.names = FALSE, col.names = FALSE)
